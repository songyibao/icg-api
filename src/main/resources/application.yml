server:
  port: 8888
  servlet:
    context-path: /api
    session:
      cookie:
        max-age: 2592000 # 30天
spring:
  application:
    name: icg-api
  # 开放更大的文件上传体积
  servlet:
    multipart:
      max-file-size: 10MB
    # 数据库配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  shardingsphere:
    datasource:
      names: icg
      icg:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: ${DB_URL}
        username: ${DB_USERNAME}
        password: ${DB_PASSWORD}
    rules:
      sharding:
        tables:
          picture:
            actual-data-nodes: icg.picture # 项目启动时动态获取可用表
            table-strategy:
              standard:
                sharding-column: spaceId
                sharding-algorithm-name: picture_sharding_algorithm # 自定义分片算法
        sharding-algorithms:
          picture_sharding_algorithm:
            type: CLASS_BASED
            props:
              strategy: standard
              algorithmClassName: com.yb.icgapi.manager.sharding.PictureShardingAlgorithm
    props:
      sql-show: true # 显示执行的SQL语句
  redis:
    database: 0
    host: ${REDIS_HOST}
    port: ${REDIS_PORT}
    password: ${REDIS_PASSWORD}
    timeout: 5000
  session:
    store-type: redis
    # session 过期时间
    timeout: 2592000 # 30天
  # RabbitMQ 配置
  rabbitmq:
    host: ${MQ_HOST:localhost}
    port: ${MQ_PORT:5672}
    username: ${MQ_USER:guest}
    password: ${MQ_PASS:guest}
    publisher-confirm-type: correlated # 开启发送确认
    publisher-returns: true # 开启发送失败回调
    listener:
      simple:
        acknowledge-mode: manual # 手动确认
        prefetch: 10 # 预拉取消息数量

mybatis-plus:
  configuration:
    # MyBatis 配置 - 开启驼峰命名转换
    map-underscore-to-camel-case: false
    # 仅在开发环境打印sql语句日志
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      logic-delete-field: isDelete
      logic-delete-value: 1
      logic-not-delete-value: 0
    enable-sql-runner: true
# 借口文档配置
knife4j:
  enable: true
  openapi:
    title: 接口文档
    version: v1.0
    group:
      test1:
        group-name: 默认分组
        api-rule: package
        api-rule-resources:
          - com.yb.icgapi.controller

# 对象存储配置（需要从腾讯云获取）
cos:
  client:
    host: ${COS_HOST}
    secretId: ${COS_SECRET_ID}
    secretKey: ${COS_SECRET_KEY}
    region: ${COS_REGION}
    bucket: ${COS_BUCKET}

# AI处理队列配置
ai:
  queue:
    name: ${MQ_QUEUE_NAME:ai_processing_queue}

logging:
  level:
    root: info

# 阿里云百炼AI配置
aliYunAi:
  apiKey: ${ALIYUN_AI_API_KEY}
